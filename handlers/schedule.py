from aiogram import Bot, types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from create_bot import dp, bot
from handlers.state.fms_schedule import FSMSchedule
from utils import create_days_markup

async def schedule_start(message: types.Message):
    markup = create_days_markup()
    await FSMSchedule.day_of_week.set()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)

async def schedule_day(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['day_of_week'] = call.data.lower()
    await FSMSchedule.next()
    await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {call.data.lower()}!\n'
                                              '–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø')
    await bot.send_message(call.from_user.id, '–ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—åüïê\n\n'
                                              '–ü—Ä–∏–º–µ—Ä:\n'
                                              '16:00-17:00')

async def schedule_time(message: types.Message, state: FSMContext):
    # –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    async with state.proxy() as data:
        data['time'] = message.text
    await FSMSchedule.next()
    await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è")

async def schedule_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMSchedule.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è\n"
                        "–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ø")

async def schedule_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await state.finish()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ, –∑–∞–Ω—è—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ")

# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cansel_schedule(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–∫')

def register_handlers_client(dp: Dispatcher):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥",
            "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    dp.register_message_handler(schedule_start, commands='schedule', state=None)
    dp.register_message_handler(cansel_schedule, state='*', commands='—Å—Ç–æ–ø')
    dp.register_message_handler(cansel_schedule, Text(equals='—Å—Ç–æ–ø', ignore_case=True), state='*')
    dp.register_callback_query_handler(schedule_day, lambda c: c.data in days, state=FSMSchedule.day_of_week)
    dp.register_message_handler(schedule_time, state=FSMSchedule.time)
    dp.register_message_handler(schedule_name, state=FSMSchedule.name)
    dp.register_message_handler(schedule_description, state=FSMSchedule.description)


